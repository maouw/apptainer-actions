name: "Build and push an Apptainer image"
description: "This action will build an Apptainer image and push it to a container registry"
inputs:
  bind:
    description: |
      A list of a user-bind path specifications. spec has the format src[:dest[:opts]],where src and dest are outside and inside paths. If dest is not given, it is set equal to src. Mount options ('opts') may be specified as 'ro'(read-only) or 'rw' (read/write, which is the default). Multiple bind paths can be given by a comma separated list.
  build-args:
    description: "List of build-time variables, e.g. 'foo=bar'"
  build-arg-file:
    description: "Path to the file containing build-time variables"
  disable-cache:
    description: "Do not use cache when building the image"
    default: 'true'
  fakeroot:
    description: "Build with the appearance of running as root (default when building from a definition file unprivileged)"
  fix-perms:
    description: "Ensure owner has rwX permissions on all container content for oci/docker sources"
  force:
    description: "Force image build even if it exists"
    default: "true"
  json:
    description: "interpret build definition as JSON"
  mount:
    description: "List of mount specifications, e.g. 'type=bind,source=/opt,destination=/hostopt'"
  notest:
    description: "Skip the %test section"
  section:
    description: "Only run specific section(s) of deffile (setup, post, files, environment, test, labels, none) (default [all])"
  update:
    description: "Run definition over existing container (skips header)"
  userns:
    description: "Build with the appearance of running as root (default when building from a definition file unprivileged)"
  writable-tmpfs:
    description: "During the %test section, makes the file system accessible as read-write with non  persistent data (with overlay support only)"
  # Metadata options
  tags:
    description: "List of tags (will replace the default tags)"
  add-tags:
    description: "List of tags to add to the image"
  deffile:
    description: |
      Path to the definition file. Default is (Apptainer|Singularity)([.](.+))[.]def in the root of the repository,
      or the first definition file found with this pattern in a subdirectory (provided there is only one definition file
      in the entire repository).
  deffiles-rootdir:
    description: "Root directory to search for definition files"
    default: .
  image-name:
    description: |
      What to name the image to build. Default is the name of the directory where the definition file is located.
  image-url:
    description: "URL to the built image"
    required: false
  image-version:
    description: "Version of the image"
    required: false
  image-path:
    description: "Path to the built image"
    required: false
  image-dir:
    description: "Directory where the image will be built"
    required: false
  apptainer-tmpdir:
    description: "Temporary directory for Apptainer"
    required: false
    default: ${{ github.workspace }}/.apptainer-tmpdir
  xtrace:
    description: "Enable set -x in the script"
    default: 'false'

outputs:
  image-url:
    description: "URL to the built image"

runs:
  using: "composite"

  steps:
    - id: export-github-inputs
      name: Set environment variables
      shell: bash
      env:
        INPUT_BIND: ${{ inputs.bind }}
        INPUT_BUILD_ARGS: ${{ inputs.build-args }}
        INPUT_BUILD_ARG_FILE: ${{ inputs.build-arg-file }}
        INPUT_DISABLE_CACHE: ${{ inputs.disable-cache }}
        INPUT_FAKEROOT: ${{ inputs.fakeroot }}
        INPUT_FIX_PERMS: ${{ inputs.fix-perms }}
        INPUT_FORCE: ${{ inputs.force }}
        INPUT_JSON: ${{ inputs.json }}
        INPUT_MOUNT: ${{ inputs.mount }}
        INPUT_NOTEST: ${{ inputs.notest }}
        INPUT_SECTION: ${{ inputs.section }}
        INPUT_UPDATE: ${{ inputs.update }}
        INPUT_USERNS: ${{ inputs.userns }}
        INPUT_WRITABLE_TMPFS: ${{ inputs.writable-tmpfs }}
        INPUT_TAGS: ${{ inputs.tags }}
        INPUT_ADD_TAGS: ${{ inputs.add-tags }}
        INPUT_DEFFILE: ${{ inputs.deffile }}
        INPUT_DEFFILES_ROOTDIR: ${{ inputs.deffiles-rootdir }}
        INPUT_NAME: ${{ inputs.name }}
        INPUT_IMAGE_URL: ${{ inputs.image-url }}
        INPUT_IMAGE_VERSION: ${{ inputs.image-version }}
        INPUT_IMAGE_PATH: ${{ inputs.image-path }}
        INPUT_IMAGE_DIR: ${{ inputs.image-dir }}
        INPUT_APPTAINER_TMPDIR: ${{ inputs.apptainer-tmpdir }}
        XTRACE: ${{ inputs.xtrace }}
        GH_TOKEN: ${{ github.token }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo XTRACE="${XTRACE:-}" >>"${GITHUB_ENV}"
        echo INPUT_BIND="${INPUT_BIND:-}" >>"${GITHUB_ENV}"
        echo INPUT_BUILD_ARGS="${INPUT_BUILD_ARGS:-}" >>"${GITHUB_ENV}"
        echo INPUT_BUILD_ARG_FILE="${INPUT_BUILD_ARG_FILE:-}" >>"${GITHUB_ENV}"
        echo INPUT_DISABLE_CACHE="${INPUT_DISABLE_CACHE:-}" >>"${GITHUB_ENV}"
        echo INPUT_FAKEROOT="${INPUT_FAKEROOT:-}" >>"${GITHUB_ENV}"
        echo INPUT_FIX_PERMS="${INPUT_FIX_PERMS:-}" >>"${GITHUB_ENV}"
        echo INPUT_FORCE="${INPUT_FORCE:-}" >>"${GITHUB_ENV}"
        echo INPUT_JSON="${INPUT_JSON:-}" >>"${GITHUB_ENV}"
        echo INPUT_MOUNT="${INPUT_MOUNT:-}" >>"${GITHUB_ENV}"
        echo INPUT_NOTEST="${INPUT_NOTEST:-}" >>"${GITHUB_ENV}"
        echo INPUT_SECTION="${INPUT_SECTION:-}" >>"${GITHUB_ENV}"
        echo INPUT_UPDATE="${INPUT_UPDATE:-}" >>"${GITHUB_ENV}"
        echo INPUT_USERNS="${INPUT_USERNS:-}" >>"${GITHUB_ENV}"
        echo INPUT_WRITABLE_TMPFS="${INPUT_WRITABLE_TMPFS:-}" >>"${GITHUB_ENV}"
        echo INPUT_TAGS="${INPUT_TAGS:-}" >>"${GITHUB_ENV}"
        echo INPUT_ADD_TAGS="${INPUT_ADD_TAGS:-}" >>"${GITHUB_ENV}"
        echo INPUT_DEFFILE="${INPUT_DEFFILE:-}" >>"${GITHUB_ENV}"
        echo INPUT_DEFFILES_ROOTDIR="${INPUT_DEFFILES_ROOTDIR:-}" >>"${GITHUB_ENV}"
        echo INPUT_NAME="${INPUT_NAME:-}" >>"${GITHUB_ENV}"
        echo INPUT_IMAGE_URL="${INPUT_IMAGE_URL:-}" >>"${GITHUB_ENV}"
        echo INPUT_IMAGE_VERSION="${INPUT_IMAGE_VERSION:-}" >>"${GITHUB_ENV}"
        echo BUILD_LABELS_PATH="${BUILD_LABELS_PATH:-${RUNNER_TEMP:-/tmp}/.build.labels}" >>"${GITHUB_ENV}"
        echo INPUT_IMAGE_DIR="${INPUT_IMAGE_DIR:-}" >>"${GITHUB_ENV}"
        echo INPUT_IMAGE_PATH="${INPUT_IMAGE_PATH:-}" >>"${GITHUB_ENV}"
        echo INPUT_APPTAINER_TMPDIR="${INPUT_APPTAINER_TMPDIR:-}" >>"${GITHUB_ENV}"

        GITHUB_TOKEN="${GITHUB_TOKEN:-${GH_TOKEN:-"$(gh auth token || true)"}}"

        if [[ -n "${GITHUB_TOKEN:-}" ]]; then    
            echo GITHUB_TOKEN="${GITHUB_TOKEN}" >>"${GITHUB_ENV}"
            echo GH_TOKEN="${GITHUB_TOKEN}" >>"${GITHUB_ENV}"
        fi

    - id: check-prereqs
      name: Check prerequisites
      shell: bash
      run: bash -c ${{ github.action_path }}/check-prereqs.sh
    - id: find-deffile
      name: Find definition file
      shell: bash
      run: bash -c ${{ github.action_path }}/find-deffile.sh
    - id: create-labels
      name: Create image labels
      shell: bash
      run: bash -c ${{ github.action_path }}/create-labels.sh
    - id: build-container
      name: Build container
      shell: bash
      run: bash -c ${{ github.action_path }}/build-container.sh
    - id: push-container
      name: Push container
      shell: bash
      run: bash -c ${{ github.action_path }}/push-container.sh
